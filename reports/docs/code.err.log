Traceback (most recent call last):
  File "C:\Users\LENOVO\anaconda3\envs\lenovo\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\LENOVO\anaconda3\envs\lenovo\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\LENOVO\anaconda3\envs\lenovo\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\LENOVO\anaconda3\envs\lenovo\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\LENOVO\anaconda3\envs\lenovo\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\LENOVO\anaconda3\envs\lenovo\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\LENOVO\anaconda3\envs\lenovo\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def plot_hist(chapter, question, name,bin=10,image_name=None):

    data = load_data(chapter)
    data.dropna(inplace=True, subset=[question], how='any')

    sns.set_style("whitegrid")
    sns.set_palette("deep")

    fig, ax = plt.subplots(figsize=(15, 5))
    
    # Calcular los bins y las frecuencias
    counts, bins, _ = ax.hist(data[question], bins=bin, density=True, alpha=0)
    
    # Calcular la media y la desviaciÃ³n estÃ¡ndar
    media = data[question].mean()
    desv_est = data[question].std()
    
    # Calcular los lÃ­mites para 2 desviaciones estÃ¡ndar
    lower_bound = media - 2 * desv_est
    upper_bound = media + 2 * desv_est
    
    # Encontrar los bins que caen dentro de 2 desviaciones estÃ¡ndar
    within_2std = (bins[:-1] >= lower_bound) & (bins[1:] <= upper_bound)
    
    # Calcular la probabilidad acumulada dentro de 2 desviaciones estÃ¡ndar
    prob_acum = np.sum(counts[within_2std] * np.diff(bins)[within_2std])
    
    # Crear el histograma
    hist = sns.histplot(data=data, x=question, bins=bins, stat='probability', 
                        multiple='stack', kde=True, ax=ax)
    
    for i, (count, bin_left, bin_right) in enumerate(zip(counts, bins[:-1], bins[1:])):
        if within_2std[i]:
            ax.axvspan(bin_left, bin_right, alpha=0.3, color='yellow')
    
    kde_x, kde_y = hist.lines[0].get_data()
    
    mediana = data[question].median()
    prob_mediana = np.interp(mediana, kde_x, kde_y)
    prob_media = np.interp(media, kde_x, kde_y)

    ax.axvline(mediana, color='green', linestyle='dashed', linewidth=2, label=f'Mediana: {mediana:.2f}')
    ax.text(mediana, prob_mediana, f'({prob_mediana*100:.2f}%)', color='green', ha='left', va='bottom')

    ax.axvline(media, color='purple', linestyle='dashed', linewidth=2, label=f'Media: {media:.2f}')
    ax.text(media, prob_media, f'({prob_media*100:.2f}%)', color='purple', ha='right', va='bottom')

    total_datos = len(data)*100/2015
    ax.set_title(f'DistribuciÃ³n Probabilidad | Muestra ({total_datos:.2f}%)\n'
                f'Prob. Acum. (2Ïƒ): {prob_acum*100:.2f}%', 
                fontsize=14, fontweight='bold')
    ax.set_xlabel(name, fontsize=12, fontweight='bold')
    ax.set_ylabel('Probabilidad', fontsize=12, fontweight='bold')

    min_val = int(np.floor(data[question].min()))
    max_val = int(np.ceil(data[question].max()))
    

    tick_labels  = list(answers_mapping(chapter,question).values())
    
    ax.set_xticks(range(min_val, max_val + 1))
    ax.tick_params(axis='x', rotation=0)

    if question in ['NPCJP2', 'NPCJP6']:
        ax.set_xticklabels(tick_labels)
    
    ax.legend()

    plt.tight_layout()
    plt.show()

    if image_name is not None:sx
        path = './circleup/figures'
        plt.savefig(f'{path}/{image_name}.png')
------------------


[1;36m  Cell [1;32mIn[13], line 73[1;36m[0m
[1;33m    path = './circleup/figures'[0m
[1;37m    ^[0m
[1;31mIndentationError[0m[1;31m:[0m unexpected indent


